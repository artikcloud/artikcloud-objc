#import <Foundation/Foundation.h>
#import "ACDeviceTypeEnvelope.h"
#import "ACDeviceTypesEnvelope.h"
#import "ACManifestPropertiesEnvelope.h"
#import "ACManifestVersionsEnvelope.h"
#import "ACApi.h"

/**
* ARTIK Cloud API
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 2.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface ACDeviceTypesApi: NSObject <ACApi>

extern NSString* kACDeviceTypesApiErrorDomain;
extern NSInteger kACDeviceTypesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(ACApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Get Available Manifest Versions
/// Get a Device Type's available manifest versions
///
/// @param deviceTypeId deviceTypeId
/// 
///  code:0 message:"success"
///
/// @return ACManifestVersionsEnvelope*
-(NSURLSessionTask*) getAvailableManifestVersionsWithDeviceTypeId: (NSString*) deviceTypeId
    completionHandler: (void (^)(ACManifestVersionsEnvelope* output, NSError* error)) handler;


/// Get Device Type
/// Retrieves a Device Type
///
/// @param deviceTypeId deviceTypeId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTypeEnvelope*
-(NSURLSessionTask*) getDeviceTypeWithDeviceTypeId: (NSString*) deviceTypeId
    completionHandler: (void (^)(ACDeviceTypeEnvelope* output, NSError* error)) handler;


/// Get Device Types
/// Retrieves Device Types
///
/// @param name Device Type name
/// @param offset Offset for pagination. (optional)
/// @param count Desired count of items in the result set (optional)
/// @param tags Elements tagged with the list of tags. (comma separated) (optional)
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTypesEnvelope*
-(NSURLSessionTask*) getDeviceTypesWithName: (NSString*) name
    offset: (NSNumber*) offset
    count: (NSNumber*) count
    tags: (NSString*) tags
    completionHandler: (void (^)(ACDeviceTypesEnvelope* output, NSError* error)) handler;


/// Get Device Types by Application
/// Get Device Types by Application
///
/// @param appId Application ID.
/// @param productInfo Flag to include the associated ProductInfo if present (optional)
/// @param count Desired count of items in the result set. (optional)
/// @param offset Offset for pagination. (optional)
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTypesEnvelope*
-(NSURLSessionTask*) getDeviceTypesByApplicationWithAppId: (NSString*) appId
    productInfo: (NSNumber*) productInfo
    count: (NSNumber*) count
    offset: (NSNumber*) offset
    completionHandler: (void (^)(ACDeviceTypesEnvelope* output, NSError* error)) handler;


/// Get Latest Manifest Properties
/// Get a Device Type's manifest properties for the latest version.
///
/// @param deviceTypeId Device Type ID.
/// 
///  code:0 message:"success"
///
/// @return ACManifestPropertiesEnvelope*
-(NSURLSessionTask*) getLatestManifestPropertiesWithDeviceTypeId: (NSString*) deviceTypeId
    completionHandler: (void (^)(ACManifestPropertiesEnvelope* output, NSError* error)) handler;


/// Get manifest properties
/// Get a Device Type's manifest properties for a specific version.
///
/// @param deviceTypeId Device Type ID.
/// @param version Manifest Version.
/// 
///  code:0 message:"success"
///
/// @return ACManifestPropertiesEnvelope*
-(NSURLSessionTask*) getManifestPropertiesWithDeviceTypeId: (NSString*) deviceTypeId
    version: (NSString*) version
    completionHandler: (void (^)(ACManifestPropertiesEnvelope* output, NSError* error)) handler;



@end
