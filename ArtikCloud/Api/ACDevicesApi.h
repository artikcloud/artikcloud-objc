#import <Foundation/Foundation.h>
#import "ACDevice.h"
#import "ACDeviceEnvelope.h"
#import "ACDeviceTokenEnvelope.h"
#import "ACPresenceEnvelope.h"
#import "ACApi.h"

/**
* ARTIK Cloud API
* No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 2.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface ACDevicesApi: NSObject <ACApi>

extern NSString* kACDevicesApiErrorDomain;
extern NSInteger kACDevicesApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Add Device
/// Create a device
///
/// @param device Device to be added to the user
/// 
///  code:0 message:"success"
///
/// @return ACDeviceEnvelope*
-(NSNumber*) addDeviceWithDevice: (ACDevice*) device
    completionHandler: (void (^)(ACDeviceEnvelope* output, NSError* error)) handler;


/// Delete Device
/// Deletes a device
///
/// @param deviceId deviceId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceEnvelope*
-(NSNumber*) deleteDeviceWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACDeviceEnvelope* output, NSError* error)) handler;


/// Delete Device Token
/// Deletes a device's token
///
/// @param deviceId deviceId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTokenEnvelope*
-(NSNumber*) deleteDeviceTokenWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACDeviceTokenEnvelope* output, NSError* error)) handler;


/// Get Device
/// Retrieves a device
///
/// @param deviceId deviceId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceEnvelope*
-(NSNumber*) getDeviceWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACDeviceEnvelope* output, NSError* error)) handler;


/// Get device presence information
/// Return the presence status of the given device along with the time it was last seen
///
/// @param deviceId Device ID.
/// 
///  code:0 message:"success"
///
/// @return ACPresenceEnvelope*
-(NSNumber*) getDevicePresenceWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACPresenceEnvelope* output, NSError* error)) handler;


/// Get Device Token
/// Retrieves a device's token
///
/// @param deviceId deviceId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTokenEnvelope*
-(NSNumber*) getDeviceTokenWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACDeviceTokenEnvelope* output, NSError* error)) handler;


/// Update Device
/// Updates a device
///
/// @param deviceId deviceId
/// @param device Device to be updated
/// 
///  code:0 message:"success"
///
/// @return ACDeviceEnvelope*
-(NSNumber*) updateDeviceWithDeviceId: (NSString*) deviceId
    device: (ACDevice*) device
    completionHandler: (void (^)(ACDeviceEnvelope* output, NSError* error)) handler;


/// Update Device Token
/// Updates a device's token
///
/// @param deviceId deviceId
/// 
///  code:0 message:"success"
///
/// @return ACDeviceTokenEnvelope*
-(NSNumber*) updateDeviceTokenWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(ACDeviceTokenEnvelope* output, NSError* error)) handler;



@end
